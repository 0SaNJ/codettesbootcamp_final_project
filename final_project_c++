#include <ESPAsyncWebServer.h>
#include <Adafruit_Sensor.h>
#include <WiFi.h>
#include <SPIFFS.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>


WiFiClient espClient;
PubSubClient client(espClient);

// MQTT
const char *mqtt_broker = "192.168.1.21";
const char *mqtt_topic = "jaysanmo/codettes/01"; // CHANGE SensorID here!
const char *mqtt_User = "";
const char *mqtt_Password = "";

// Replace with your network credentials
const char *ssid = "Team09";
const char *password = "H@ckTe@m)(";

#define DHTPIN 4
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

class PulseSensor {
private:
  int sensorPin;
  int signalVal;
  int beatsPerMinute;

public:
  PulseSensor(int pin) : sensorPin(pin), signalVal(0), beatsPerMinute(0) {}

  void setup() {
    // Additional setup for Pulse Sensor if needed
  }

  void readData() {
    signalVal = analogRead(sensorPin);

    // Map the raw sensor value to a realistic range of beats per minute
    beatsPerMinute = map(signalVal, 0, 4096, 60, 120);

    delay(1100); // Adjust the delay as needed
  }

  int getBeatsPerMinute(int which) {
    return which == 1 ? beatsPerMinute : signalVal;
  }
};

PulseSensor pulseSensor(34); // Adjust to the correct pin for ESP32

class DHTSensor {
private:
  int pin;
  float humidity;
  float temperature;

public:
  DHTSensor(int sensorPin) : pin(sensorPin), humidity(0), temperature(0) {}

  void setup() {
    dht.begin();
  }

  void readData() {
    humidity = dht.readHumidity();
    temperature = dht.readTemperature();
    delay(2000); // Adjust the delay as needed
  }

  float getHumidity() {
    return humidity;
  }

  float getTemperature() {
    return temperature;
  }
};

DHTSensor dhtSensor(DHTPIN);

void setup() {
  Serial.begin(115200);
  pulseSensor.setup();
  dhtSensor.setup();

  // Initialize SPIFFS
  if (!SPIFFS.begin()) {
    Serial.println("An Error has occurred while mounting SPIFFS");
    return;
  }

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  WiFi.setSleep(false);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }

  // Print ESP32 Local IP Address
  Serial.println(WiFi.localIP());

  // MQTT
  client.setServer(mqtt_broker, 1883);
  if (initMqtt()) {
    client.publish("jaysanmo/codettes/01", "Hello from ESP32");
  }
}

unsigned long lastMqttTime = millis();
const unsigned long Mqtt_INTERVAL_MS = 2000;

void loop() {
  client.loop();

  // Send regular MQTT data
  if ((millis() - lastMqttTime) > Mqtt_INTERVAL_MS) {
    if (client.connected()) {
      handle_MqttData();
      lastMqttTime = millis();
    } else {
      initMqtt();
    }
  }

  // Pulse Sensor code
  pulseSensor.readData();

  // DHT Sensor code
  dhtSensor.readData();

  // CLI
  if (Serial.available() > 0) {
    char command = Serial.read();
    processCommand(command);
  }
}

void processCommand(char command) {
  switch (command) {
    case 'R':
      pulseSensor.setup();
      dhtSensor.setup();
      Serial.println("Pulse Sensor and DHT Sensor setup complete.");
      break;

    case 'D':
      Serial.println("Pulse Sensor Data:");
      Serial.println("Raw Signal Value: " + String(pulseSensor.getBeatsPerMinute(0)));
      Serial.println("Beats Per Minute: " + String(pulseSensor.getBeatsPerMinute(1)));

      Serial.println("DHT Sensor Data:");
      Serial.println("Humidity: " + String(dhtSensor.getHumidity()) + "%");
      Serial.println("Temperature: " + String(dhtSensor.getTemperature()) + "Â°C");
      break;

    default:
      Serial.println("Invalid command. Available commands: R (Setup Sensors), D (Display Sensor Data)");
  }
}

bool initMqtt() {
  if (!client.connected()) {
    Serial.println("Connecting to MQTT...");

    if (client.connect("ESP32Client", mqtt_User, mqtt_Password)) {
      Serial.println("Connected");
      return true;
    } else {
      Serial.print("Failed with state ");
      Serial.print(client.state());
      delay(2000);
      return false;
    }
  }
}

void handle_MqttData() {
  float h = dhtSensor.getHumidity();
  float t = dhtSensor.getTemperature();

  StaticJsonDocument<1023> doc;
  doc["temp"] = t;
  doc["humid"] = h;
  doc["pulse"] = pulseSensor.getBeatsPerMinute(0);
  doc["HB"] = pulseSensor.getBeatsPerMinute(1);
  doc["dht_humid"] = h;
  doc["dht_temp"] = t;

  char out[128];
  int b = serializeJson(doc, out);
  serializeJson(doc, Serial);
  Serial.print("bytes -> ");
  Serial.print(b, DEC);

  // Publish the data to MQTT
  client.publish((char *)mqtt_topic, out) ? Serial.println(" -> delivered") : Serial.println(" -> failed");
}
